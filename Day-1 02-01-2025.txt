FULL STACK TRAINING DAY-1&2 02/01/2025 & 03/01/2025 & 04/01/2025

opensource tools for deploying 
1.firebase----->multitasker,it has itself having a real time database
Advantages:
deplyement,authentication(gmail,otp),
2.netlify------------>drag and drop
3.git and GitHub---------->cloud storage
4.git-lab------->richer in UI
xenkin,scoobernet,
EC2-development purpose-->under AWS
5.bit-bucket


git
->it is a version controller
->used to keep track on a code.
->easy and simple to learn 

GitHub
->used to store and manage the code
->cloud storage


how to use GitHub:
install the git-bash--->nothing but command prompt
command: git --version
or
command prompt
or
vs code

___________________________________________________________________________________________________________________________

03/01/2025

->git is of 2 types they are

1.local repo:
 ---->2 parts
       1.un-tracked(unstaged) files
           >create
           >update
           >delete
       2.tracked files
           --->command to convert untracked to tracked is:
           git add filename(only one file contains)
             or
           git add .(all files are added at a time)(all files are not tracked) for this one more command
            or
           git commit-m""

2.cloud repo(git-hub):
  -->command for establishing communication b/w localrepo and github
     git remote add origin http-path
  -->command to push the tracked files(default branch created in repository that is main)(-u ---> upstream)
     git push -u origin master/main

command:
---> git init (stands for initialization)


____________________________________________________________________________________________________________________________


04/01/2025

Electron js is used to develop desktop application
react.js is used to develop web application

WHAT IS JAVASCRIPT?
It is used to convert static page into dynamic page

VARIABLES in javascript:
--->variables is a set of blocks used to store data
--->Variables are dynamic in nature(no need of mentioning the datatype)

VARIABLES HAVING SCOPE in js :
1.global(declare the variables outside the function and access the inside the function)
2.loacl-scope/script-scope
3.block scope(having {})

VARIBLES ARE DIVIDED INTO 3 TYPES:
1.var (comes under global scope)
2.let (comes under local scope)
3.const (comes under local scope)



DATATYPES:

primitive data types
1.number
2.string
3.boolean 
4.undefined
5.Null(type in js is object)
6.Delete

nonprimitive datatypes
1.class
2.object
3.array
4.function
5.maps
6.sets

--->end of the everything in javascript is treated as a javascript


___________________________________________________________________________________________________________________________________________

06/01/2025(Monday)

1.JavaScript:
---->1.Develop dynamic websites

1.Static websites --- remains same to every one
ex: fb login
2.Dynamic websites --- changes to every one(data)
ex: you-tube ,Criczbuzz ,Google maps 


Variables:

-->1.satic typed and dynamic type:
-->2.variable are used in every programming language
-->3.variables are used to store the data(any kind of data)
-->4.variables are case sensitive
-->5.variables we can start with letters,_,$
-->6.variables we can't start with numbers
-->7.Reserved words are not allowed
-->8.Allowed letters,_,$,numbers


How  to declare variables:
 >var
 >let
 >const

1)var keyword 1995-2015
2)let keyword 2015
3)var used only old browsers

1.Reassigning variables:

 ex:    var fav_std="sam"
        fav_std="kavya"
        fav_std="sri"                        o/p:sri
        document.write(fav_std);
        console.log(fav_std);

 ex:    var a=100;
        a=20;
        document.write(a+a);                o/p:40
        console.log(a+a);

-->reassigning variables is possible by var
-->reassigning with let also accepted
-->reassigning with const not accepted

1.Redeclaring with var is accepted:

example:
        var a=1:
        var a=5:
        document.write(a+a);      
        console.log(a+a);

2.Redeclaring with let is not accepted:

example:
       let a=1:
       let a=5:
       document.write(a+a);         o/p:error
       console.log(a+a);

3.reassigning with const not accepted:


Block Scope:

Variables declared with var does not have blockscope

example:
    var a="sai";
        {
            var a="kumar";
            console.log(a);
        }
        console.log(a);

example:
      
      let a = "sai";
      {
        let a = "kumar";
        console.log(a);
        console.log(a);
      }
      console.log(a);
__________________________________________________________________________________________________________________________________
07/01/2025

Data Types:
1)Dynamic type languages
Two types:
1.Primitive data types
2.Non-primitive datatypes: Objects, Arrays

---->TO CHECK THE DATATYPE - typeOf

1.PRIMITIVE DATATYPES: predefined ; we can store single values
  1.Numbers:integers,floats
  2.String:Stream of characters enclosed in quotes
   ---single,double,backtick quotes;
  3.Boolean : true or false
  4.Null :empty value or no value
example:
      let a = null;
      document.write(a, "<br>");
      document.write(typeOf(a));
  5.Undefined :---declared variable with no value


 1.Numbers:
ex:1,-1,-4.4,5.5

 2.String:Stream of characters enclosed in quotes
 --single,double,backtick quotes;
Single and Double quotes works same
---Back Ticks introduced in ES6 version
---it provides

ex:for backticks
        let a=1
        console.log("hi +a+a")                            o/p:hi+a         chrome:
        document.write('hi+ a+a' ,"<br>")                  hi +2            hi+ a+a
        document.write(`hi+ ${a+a}`)                       hi +a+a          hi+ 2
        console.log(`hi +${a+a}`)                          hi +2

string concatenation:

example:
  a=sai
  b=kumar
  age=30
  let c=

o/p: i am sai kumar, my age is 30 years old
program:
      let a = "sai";
      let b = "kumar";
      let age = 30;
      console.log(`I am ${a + " " + b},my age is ${age} is years old`);

Example: Reactjs student = sai kumar
      let a = "Reactjs";
      let b = "sai kumar";
      console.log(`${a + "=" + b}`);

1.python,java,c,c++
1.Data structures

#leetcode
#hackerrank
#codechef
#written test in mncs
#Technical interviews
#Conditional statements:only once  #1-10
#loops:
#functions:
#oops




console(35>=35)  #
(35>=30 or (30<=36)   #TorF -- T
(35>=30 and (30<=36)  #TorF -- T
(35>=30 and (36<=36)  #TorF -- T
(35>=30 and (39<=36)  #TorF -- 

(36>=39)


or
  
T or F = T
F or T = T
F or F = F
T or T = T
T and T = T


CONDITION:
-->An expression that evaluates either (true or false).
console.log(5>4);

CONDITIONAL STATEMENT:
-->To make the set of instructions execute only when the given condition is true.

Block of code(conditional block):set of instructions.
-->When this block of code will execute it will execute when the specific condition is true.

INDENTATION:{ inside  the braces that is conditional block
                        }

if :   #only one possible conditions
elseif  :   #more than one
else  :   #
 
_________________________________________________________________________________________________________________________

08/01/2025

JavaScript Operations:

1.Arithmetic Operators:
+,-,*
Multiplication          - *
Division                - /  (Q)
Modulus Operator        - %  (R)
Exponential(raised to the power  - **
++ ,
--


example:
      let a = 5;
      let b = 2;
      document.write(a * b, "<br>");       o/p:10
      document.write(a ** b, "<br>");          25
      document.write(a / b, "<br>");           2.5
      document.write(a % b);                   1

2.Assignment Operator:

 var student = "swetha"
+=
-+
/+
%=

3.Logical Operators:

and  =  &&
T and T  = T
or   = ||
T or F  = F
not    = !

4.Relational(Comparison Operators) values:

<,>,>=,<=,==,===,!=,!===



5.Conditional Operator;Ternary operator  (?)

First evaluates an expression



6.windows method

alert()
prompt()
confirm()
______________________________________________________________________________________________________________________________________________

09/01/2025

Coditional Statements:

-->To make the set of instructions(block of code)(coditional block)execute only when the given condition condition is true.
-->used to decide whether the code has to be executed or skip based on the given condition
-->line-line(sequence)

Block Of Code :set of instructions
-->it will execute only when that specific condition is true

Condition :An expression that evaluates an result(True or False)
Ex:console.log(5>6)

Methods:

if 
if-else
else if
switch
Ternary Operator

if :

only one possible condition
->if the condition is True it will execute other wise it skip

Syntax:
if(condition){
---block of code
}

Example: condition is True
      let a = 5;
      let b = 10;
      //5<10    #T
      if (a < b) {
        document.write("hi vidya", "<br>");                        o/p:hi vidya
      }                                                                welcome to india
      document.write("welcome to india");
      //out of block

Example: Condition is false
      let a = 5;
      let b = 10;
      //5>10    #F
      if (a > b) {
        document.write("hi vidya", "<br>");                        o/p:welcome to india
      }                                                                
      document.write("welcome to india");
      //out of block


if-else:

example:

//if else condition when condition is true
      let a = 5;
      let b = 10;
      //5>10    #T
      if (a > b) {
        document.write("hi vidya", "<br>");                       o/p:srividya
      } else {                                                    welcome to india
        document.write("srividya", "<br>");
      }
      document.write("welcome to india");
      //out of block


else-if:

example:

      age = prompt("enter your age?");
      name = prompt("enter your name?");
      if (age < 18) {
        alert(name + "you are too young too marry");              o/p:enter your age:20
      } else if (age > 35) {                                          enter your name:srividya
        alert(name + "your are too old to marry");                    srividya perfect age to marry
      } else {                                                        welcome to india
        alert(name + " perfect age to marry ");
      }

      alert("welcome to india");


Exampple program:

//Example program:

      let a = prompt("score of player 1");
      let b = prompt("score of player 2");
      if ((a > 300 || b > 300) && a + b < 500) {           o/p:score of player1:300
        alert("can teamup");                                   score of player2:200
      } else {                                                 cannot teamup
        alert("cannnot teamup");
      }
_________________________________________________________________________________________________________________________________________________________

10/01/2025


Program Solcing eith JavaScript

1.Write a program to check whether the number is divisible by 2 and 3 and both(take prompt).

Program:

      let number = parseInt(prompt("enter the value"));
      if (number % 2 == 0 && number % 3 == 0) {
        document.write("number is divible by 2 and 3");              o/p:6
      } else {                                                           number is divisible by 2 and 3
        document.write("it is not divisible");
      }
      

2.write a program to find the largest number out of three numbers expected from the user.

Program:
      a = prompt("enetr the first value");  or  ... a = parseInt(prompt("enetr the first value")); 
      b = prompt("enter the second value");
      c = prompt("enter the third value");                           o/p:100
      if (a >= b && a >= c) {                                            500
        largest = a;                                                     129
      } else if (b >= a && b >= c) {                                     the greater valie is 500                                
        largest = b;
      } else {
        largest = c;
      }
      document.write("the greater value is" + largest);

3.Accept the following from the user and calculate the percentage of classes attended
  a.Total number of working days
  b.Total number of days for absent
After calculating percentage show that, if the percentage is less than 75 then student will not be eligible to write exam

Program:

      a = prompt("Total number of working days");
      b = prompt("Total number of days absent");
      c = a - b;                                                  o/p:Total no of working days :100
      d = (c / a) * 100;                                              Total no of days absent :15
      if (d > 75) {                                                   eligible to write exam
        document.write("eligible to write exam");
      } else {
        document.write("not eligible");
      }
      

4.A company decided to give bonus to employee according to the following criteria:



switch 
if
else
else if
 synatx:
  switch(varaiable/expression){
case value 1:
//block of code for case 1
break;
case value 2:
//block of code for case 2
break;
case value 2:
//block of code for case 3
break;
default;
//block of code

___________________________________________________________________________________________________________

20/01/2025

LOOPS:

Conditional statements:

--block of code
1-10 numbers
Loops:Block of code several times
1-10
#10 times

1)for loop :
2)for in
3)for of
4)while
5)do while


1)for loop:
For(initialisation, condition,update expression{
--block of code
}

initialisation place where loop start(init)

1-5
  #i<5 or i<=5
  for(let i=1; i<=5;i++){ 
   console.log(i)
  }
  i=1,2,3
  1<=5 #T 2<=5,3<=5
  i++=i  #1+1=2 ; 2+1=3
  Block of code #1;2;3;4;5

example:
  for(let i=0;i<7;i=i+2){
   console.log(i+2)
  }
 #i=0;2;4;6;8
 #c=0<7;2<7;4<7;6<7;8<7=F
 #updation=2+2=4;4+2=6;6+2=8
 #B=0+2=2;2+2=4;4+2=6;6+2=8

example:
 #10-15
 #srividya  #5
 #squares   -1-10
 #1 4 9 16 25----100
 #9th table

 for(i=10;i<=15:i++){
  console.log(i);
 }
 
______________________________________________________________________________________________________________

21/01/2025

forin:

const a="ramya"
for(let i in a){
console.log(a[i]);
}

----->While loop:

--for loop
--infinite(unknown)
syntax:
while(condition){
block of code
}

1.cond inside the()
2.{}
3.false #

ex:1-5

let i=1,n=5;
///while loop 1-5
while(i<=n){
//1<=n  ;2<=5
console.log(i+1)   #block of code will execute
i=i+2  #updation  #1+1=2 o/p:2 4 6 8
}

example:

let i = 2;
      n = 8;
      ///while loop 1-5
      while (i <= n) {
        //2<=8;4<=8;6<=8;8<=810<=8
        console.log(i + 1); //block of code will execute
        //2+1=3 ;4+1=5;6+1=7                                 o/p:3 5 7 9 
        i = i + 2; //updation
        //2+2=4;4+2=6;6+2=8;8+2=10
      }


----->do-while:

syntax:
do{
//block of code
}while(condition)

#false even it execute once

example:
let c=0;
do{
console.log("count is:"+c);
c++
}while(c<5);

o/p:
count is:0
count is:1
count is:2
count is:3
count is:4

----->Break,Cointinue

Matches it will stop
example:
for(let i=1;i<=8;i=i+2){                  o/p:1 3 
if(i>=4){
break;
}console.log(i)
}

#i=1;3;5
#up=1+2=3;3+2=5
#c=1<=8;3<=8;5<=8
#block of code :1;3

---->continue

matches to the condition only that value get skip and remaining value get continued


example:
for(let i=1;i<=8;i=i+2){                  o/p:1 3 
if(i>=4){
continue;
}console.log(i)
}

___________________________________________________________________________________________________________________________________________________


22/01/2025 Wednesday



Nested Loops:

A loop inside the another loop
The inner loop will execute one time for each iteration of outer loop.
An inner loop within the repeating block of outer loop

//oterloop

#python,java

example:

 //innerloop
      for (let i = 1; i <= 3; i++) {
        document.write(i, "<br>");
 //outer loop
        for (let j = 1; j <= 4; j++) {
          document.write(j, "");
        }
        document.write("<br>");
      }


Pyramid example:

           *
          * *
         * * *
        * * * *
#by using python or java in interviews


function Pattern(rows) {
  for (let i = 1; i <= rows; i++) {
    console.log('* '.repeat(i).trim());
  }
}

// Generate the pattern with 4 rows
Pattern(4);

right angle pyramid example:
for (let i = 1; i <= 5; i++) {
        for (let j = 1; j <= i; j++) {
          document.write("* ");
        }
        document.write("<br>");
      }


pyramid:

for (let i = 1; i <= 5; i++) {
        for (let j = 1; j <= 5 - i; j++) {
          document.write("&nbsp;&nbsp;");
        }
        for (let k = 1; k <= 2 * i - 1; k++) {
          document.write("*");
        }
        document.write("<br>");
      }

__________________________________________________________________________________________________________________________

23/01/2025   Thursday

Functions:A function is a reusable block of code
It can be call any where program.

----Reusable code :using an existing code with out writing it ever we need

You can use the same code with different arguments to get the results



JS:

Key word = function
()
Parameters = values(variables) which are declared inside the 
() 
which are defining a functions
Arguments : values which are passed through the parameters


#synatax:
#errors
#Time-management

eaxmple:

function greet() {
        console.log("hello sainath");
      }
      greet();
      console.log("hi sainath");
      greet();
      console.log("hello kiran");
      greet();

example:function with parameters

//function with parameters

      function g(name) {
        console.log("hello" + name);
      }
      let name = prompt("Enter your name?");
      g(name);

#add two numbers
#two arguments


example:
function add(a,b){
console.log(a+b)
}
add(3,5)
add(7,3)

function return:

--The return statement can be used to return the value to function call

example:

      function a(aa, bb) {
        return aa + bb;
      }
      let n1 = parseFloat(prompt("enter a number1:"));
      let n2 = parseFloat(prompt("enter a number2:"));
      //calling a function
      let result = a(n1, n2);
      //display the result
      console.log("The sum is:" + result);

Anonymous function:
A function with out name, After we create a function with out name and we assign it to a variable

Example:
Sum=function(n1,n2){
let r=n1+n2
return r
}
console.log(sum(8,9))

__________________________________________________________________________________________________________________

24/01/2025 Friday

Functions:

ArrowFunctions:
--->ES6 version
--->more readable and more structure
--->anonymous functions(lambda functions)
--->without function name but they are assigned to a variable.


Example:arrow functions without parameter
let c=()=>{
console.log("hi sri")
}
c()


Example:arrow functions with parameter
      let x = (x, y) => {
        console.log(x + y);
      };
      x(2, 3);
      x(35, 45);

--Arrow function with only one argument

#without using paranthesis
      let greet = (x) => console.log(x);
      greet('hello');
    </script>

--Arrow function without argument

Example:
let greet=()=>
      console.log("hello)
      greet()

--Arrow functions as an expression

Example: 

let 18;
let welcome=(age<18)?
()=>console.log('hi sri")
()=>console.log('hi sai")
welcome()

------>Synchronous and Asynchronous:
--step by step
--one task

Example:

function task1(){
console.log("Task1 : Start")
}
function task2(){
console.log("Task2 : Start")
}
function task3(){
console.log("Task3 : Start")
}
Task1()
Task2()
Task3()

Asynchronous functions:
--multiple tasks at a time.

      console.log("hi sri");
      setTimeout(() => {
        console.log("i am watching you");
      }, 2000);
      console.log("in the lab");


JAVASCRIPT CALLBACKS:

#functions
#oops
#file handling
#multithreading
#exception handling
#json

JAVASCRIPT CALLBACKS:

A call back function ias function that is passed argument to another function;


function greet(name,callback){
console,log(`Hello,${name}!`)
callback();
//this calls the callback function after greeting
}
Function hi(){
console.log("how are you")
}
//call greet and pass hello as the callback
gret("sri",hi)


Promises:

Three states
1)pending:---still  not completed
2)fulfilled == task completed
3)Rejected ==The operation is failed

Example:

let myPromise=new Promise((resolve,reject)=>{
let success=True;

if (success){
resolve("task completed);
}else{
reject("task failed")
})

__________________________________________________________________________________________________________________

25/01/2025  Saturday

Callback Function:

-->you can pass the callback functions as an argument to another function

Execution:
The function receiving the callback will execute the callback at some point during execution (often at the end or after an asynchronous operation is done.

Example1:

function mainfunction(callback){
console.log("Executing main function");
callback()
//here we call the callback function
}
function callbackfunction() {
  console.log("callback function executed");
}
mainfuncion(callbackFunction);

exp:
->mainfunction takes a parameter callback
->callbackFunction is passed as an argument to mainfunction
->inside the mainfunction, the callback function.

o/p:
mainfunction(callbackFunctionn);

it will execute the code inside the mainfunction
it will print("Executing main function");
then it reaches to callback(); where it call the function which is passed to mainfunction (callback function)


EXample2: 

---->passing a Named function as a callback;

function greet(name ,callback ){
console.log("hello" +name);
callback();
//executes the call backfunction after greeting
}
function goodbye(){
console.log("Goodbye");
}
greet("sri" ,goodbye);

--->using anonymous function as a callback


function greet(name ,callback ){
console.log("hello" +name);
callback();          //executes the call backfunction after greeting
}
greet("sri" ,function);
console.log("goodbye")
}
//anonymous function as a callback


EX:we didn't pass a named function like (goodbye);
Instead of that we defined an anonymous function directly with in the greet function call

Example4:
Asynchronous callback with setTimeout

      function fetchData(callback) {
        console.log("Fetching data...");
        setTimeout(function () {
          console.log("Data fetched");
          callback();
        }, 2000);
      }
      function processData() {
        console.log("processing the fetched data...");
      }
      fetchData(processData);

EXample5:

--->using a callback with array methods(map)

const numberws=[1,2,3,4,5]
const d=numbers.map(function(num) {
return num*2
})
console.log(d)

EX:
map() is a built in array method that callback function to process each item in array
The callback here doubles each number (num*2) and will result a new array with doubled values

User registration Scenario based :

EX:

function registerUser(username,email,callback){
console.log("registering user"+username);
setTimeout(function(){
console.log("user"+username+"registered successfully");
callback(email);   //calls the callback after registration
},2000);
}
function sendWelcomeEmail(email){
console.log("sending welcome email to"+email);
}
registerUser("srividya","srividya123@gmail.com",sendWelcomeEmail);

_______________________________________________________________________________________________________________________

27/01/2025

promise:

-->A promise a special javascript object that represents the eventual completion( or failure)  of an asynchronous operation.
-->It allows to handle asynchronous task more efficiently than callbacks.

THREE STATES:
1.Pending : The initial state, the promise is still waiting for the operation to finish.
2.fullfilled : The operation completed successfuly
3.Rejected : The operation failed.

Exp :
1.To create a promise  - new promise()
Two parameters:-
       1.resolve - to mark the promise as succesfully
       2.reject - mark it as failed

2.handling the result :
    .then() method is called when promise is fullfilld.
  It will receive the result from resolve()
    .catch() method is called if the promise is rejected.
  It receives the error message from reject()

Example :
Let mypromise = new promise((resolve,reject)=>{
let success =true;
if(success){
resolve("The operation is successfull");
}else{
Reject("The operation failed")
}
});
mypromise
.then((result)=>{
console.log(result);
});
.catch((error)=>{
console.log(error);
})


Chaining Promises :

Ex:

 let promise = new Promise((resolve, reject) => {
          resolve(5);
      });

      promise
      .then((result) => {
          console.log(result);
          returnresult * 2;
      })
          .then(result => {
              document.write(result);
              return result + 3;
          })
          .then(result => {
              document.write(result);
          })
          .catch(error => {
              document.write(error);
          });

Ex: promise with set TimeOut
--->asynchronous task using setTimeOut, and the promise will resolve after ca certain amount of time.

let fetchData = new Promise((resolve, reject)=>{
let datafetched = true;
setTimeout(()=>{
if(dataFteched){
resolve("data fetched successfull")
}else{
reject("data fetching failed")
},2000)
})
fetchData
.then(result=>{
console.log(result)
})
.catch(error=>{
console.log(error)
})

_________________________________________________________________________________________________________________________

28/01/2025

DOM(Document object model)

-->It is used in web development used to interact and manipulate(change) the html documents.

when the web page is loaded , the browser creates DOM of the web page.
when the html file is loaded into the browser,the javascript cannot understand the html document directly.

DOM  : it is basically the representation of the same html document but in a tree like structure composed of objects.

keypoints:

1.Structure :The DOM represents the structure of html document as a tree. Each node in tree represents the elements, an attribute or text.
2.Manipulation :Using javascript , you can interact with elements (buttons, paragraphs) on the webpage, changing the content ,styles ,can add or remove elements
3.Event Handling : you can handle the interactions,like click or pressing the button.
4.W3C world wide web consortium:

Dom:

                               HTML
                              /    \
                           Head    Body
                            /      /   \
                          Titile  H1   H2

<html>
<head>
<title>mallareddy university</title>
</head>
<body>
<h1>i am in hyd</h1>
</body>
</html>

Methods of Document Objects:

-->used to interact with and manipulate the content
Getting Element:
1.Getting an Element by id:
2.Getting an Element by class:
3.Getting an Element by tag:
4.Getting an Element by query selector:

#id and class;
#12
@3
#g1-4   green
#g2-4   red
#g3-4   blue

#when there are same html elements
#class=group
#id =a;b;c
#id =a-single

_______________________________________________________________________________________________________________________

29/01/2025    Wednesday

getElementById():
return the element having the given id value.

<h1 id="a">i am sai</h1> 
    <h1 id="b">i am sri</h1>
    <h1 id="c" >i am shashi</h1>

    <script>
      let x = document.getElementByClassName("a");
      console.log(x)

getElementByClassName():
return all the elements having the same class name
 

<h1 id="a" class="a">i am sai</h1>
    <h1 id="b" class="b">i am sri</h1>
    <h1 id="c" class="c">i am shashi</h1>

    <h1 class="a">i am srividya</h1>
    <script>
      let x = document.getElementByClassName("a");
      console.log(x);


getElementByClassName():
return an html collection object 
An html collection is an array like list or html elements.
The length property provides the size of collection.


getElementByTagName():

--This method 


<h1 id="a" class="a">i am sai</h1>
    <h1 id="b" class="b">i am sri</h1>
    <h1 id="c" class="c">i am shashi</h1>

    <h1 class="a">i am srividya</h1>
    <script>
      let x = document.getElementByTagName("h1");
      console.log(x);

      for (let i = 0; i < x.length; i++) {
        console.log(x[i]);
      }

Python ; Java
1.Conditional
2.loops
3.functions
4.OOPS
5.Exceptional handling
6.File handling


getting elements by using query selector methods

The document query selector methods select the html elements by tagname , by id , class name.

Queryselctor: Can be used to select HTML element by its tagname , by id , class name ; 
-->it selects the first element.

Example:

<h1 id="a" class="a">i am sai</h1>
    <h1 id="b" class="b">i am sri</h1>
    <h1 id="c" class="c">i am shashi</h1>

    <h1 class="a">i am srividya</h1>
    <script>
      let x = document.querySelector("h1");
      console.log(x);
Output: <h1 id="aa" class="a">i am sai</hi>

QueryselectorAll:
-->it selects all the html elements by its class name and class name and tagname

Manipulating Elements:
<h1>sri</h1>
To create HTML Elements:

createElement() -create a new element 
-->method -document .createElement()

textContent():   -property

 

To create multiple elements:

_________________________________________________________________________________________________________________________

30/01/2025     Thursday

DOM:

--get element by id,class,tag
--queryselector methods
--to create a eleemmnt by using js:

1.single element
2.multiple element

Ex1:
To create multiple elements
const titles =["sai","srikar","ravi"]
for(let i=0;i<titles.length;i++){
let title=document.createElement('h1');
title.className="a"
title.textContent=titles[i]
console.log(title)
}

ex2:
let title
for(let i=0;i<3;i++){
title=document.createElement('h2')
title.className="tt"
title.textContent=i
console.log(title)
}
#0,1,1


<h1>Removing child node</h1>
<ul>
<li>sri</li>
<li>srividya</li>
<li>sridhar</li>
</ul

<script>
const ul=document.querySelector('ul')
const lists=document.querySelectorAll('li')
for(const list of lists){
console.log(`Removing:${list.textContent}`)
ul.removeChild(list)
}
</script>

To Append a new element():

<div id="a">
          <h1>Deepa</h1>
          <h1>Rashmi</h1>
        </div>
        <div id="b">
          <h1>Rakesh</h1>
          <h1>Sumith</h1>
        </div>
        <script>
          let n = document.createElement("h2");
          n.textContent = "Srividya is the team lead";
          ///get the parent element
          let p = document.getElementById("b");
          console.log(p.innerText);
          p.appendChild(n);
          console.log(p);
          console.log(p.innerText);
        </script>

_______________________________________________________________________________________________________________________

31/01/2025     Friday


DOM:

1.create a new element(Single,multiple)
2.append a element inside the parent node
Add the element at the end
3.InsertBefore():insert a new node before an existing node or child note of a specific parent



<div id="a">
      <h1>ravi</h1>
      <h1 id="r">ram</h1>
    </div>
    <div id="b">
      <h2>sri</h2>
      <h2>vidya</h2>
    </div>
    <script>
      let n = document.createElement("h2");
      n.textContent = "sai";

      let p = document.getElementById("a");
      let l = document.getElementById("r");
      p.insertBefore(n, l);
      console.log(p);
    </script>

To remove a element:
let b = document.getElementById("b")
b.remove()

To remove an child element:
removeChild():

<div id="a"> 
    <h1 id="re">ravi</h1>
    <h1">ram</h1>
    </div>
    <div id="b">
    <h2>sai</h2>
    <h2>aakash</h2>
    </div>
    <script>
        let n = document.getElementById("a");
        let l = document.getElementById("re");
        console.log(l)
        n.removeChild(l)
    </script>
OUTPUT:
                ram
                sai
                Aakash

To replace an element:

<div id="a">  
        <h1 id="re">ravi</h1>
        <h1">ram</h1>
        </div>
        <div id="b">
        <h2>sai</h2>
        <h2>aakash</h2>
        </div>

    <script>
        let n=document.createElement('h1')
        n.innerText="version It"

        let p = document.getElementById("a");          
      //replace all the children with version It

       p.replaceChildren(n)
       console.log(p) 



















































































